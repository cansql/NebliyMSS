#!/bin/bash
# Web Site: www.nebliy.com
# The Project's Website: mss.nebliy.com
# Author: cansql
set -e
source <(curl -sSL https://gsi.nebliy.com/beacol/color.sh)


echo -e "${GREEN}====================================================${RESET}"
echo -e "${GREEN}==     Nebliy Minecraft 'start.sh' Generator      ==${RESET}"
echo -e "${CYAN}==                  mss.nebliy.com                 ==${RESET}"
echo -e "${GREEN}====================================================${RESET}"
echo ""
echo -e "${CYAN}This tool will create a 'start.sh' launcher script for your server.${RESET}"
echo -e "${CYAN}Please answer the following questions.${RESET}"
echo ""

while true; do
    read -e -p "$(echo -e "${YELLOW}RAM to allocate for the server (in MB, e.g., 2048): ${RESET}")" RAM_MB
    
    if [[ "$RAM_MB" =~ ^[0-9]+$ ]]; then
        break
    else
        echo -e "${RED}Error: Please enter a valid number.${RESET}"
    fi
done

echo ""

DEFAULT_PATH=$(pwd)
read -e -p "$(echo -e "${YELLOW}Full path to the server files [Default: $DEFAULT_PATH]: ${RESET}")" SERVER_PATH

if [ -z "$SERVER_PATH" ]; then
    SERVER_PATH=$DEFAULT_PATH
fi

SERVER_PATH=$(readlink -f "$SERVER_PATH")
echo ""

while true; do
    read -e -p "$(echo -e "${YELLOW}Server JAR file name (e.g., server.jar, paper.jar): ${RESET}")" JAR_FILE
    
    if [ -n "$JAR_FILE" ]; then
        break
    else
        echo -e "${RED}Error: JAR file name cannot be empty.${RESET}"
    fi
done

OUTPUT_FILE="$SERVER_PATH/start.sh"

echo ""
echo -e "${YELLOW}----------------------------------------------------${RESET}"
echo -e "${YELLOW}==               CONFIRM SETTINGS                 ==${RESET}"
echo -e "${YELLOW}----------------------------------------------------${RESET}"
echo ""
echo -e "${CYAN}The file '${YELLOW}$OUTPUT_FILE${CYAN}' will be created with the following settings:${RESET}"
echo ""
echo -e "  ${CYAN}RAM Amount:${RESET}    ${GREEN}${RAM_MB}M${RESET}"
echo -e "  ${CYAN}Server Path:${RESET}   ${GREEN}$SERVER_PATH${RESET}"
echo -e "  ${CYAN}JAR File:${RESET}      ${GREEN}$JAR_FILE${RESET}"
echo ""

while true; do
    read -e -p "$(echo -e "${YELLOW}Are these settings correct? [Y/n] (Default: Yes): ${RESET}")" yn
    
    if [[ "$yn" == "n" || "$yn" == "N" ]]; then
        echo -e "${RED}Operation cancelled. No script was created.${RESET}"
        exit 1
    elif [[ "$yn" == "y" || "$yn" == "Y" || -z "$yn" ]]; then
        echo -e "${GREEN}Settings confirmed.${RESET}"
        break
    else
        echo -e "${RED}Please enter 'y' (Yes) or 'n' (No).${RESET}"
    fi
done

echo ""
echo -e "${CYAN}Creating '${YELLOW}$OUTPUT_FILE${CYAN}'...${RESET}"

cat <<EOF > "$OUTPUT_FILE"
#!/bin/bash
#
# ===================================================================
# == Minecraft Server Launch Script
# == This script was auto-generated by the installer.
# ===================================================================

# --- VARIABLES ---
# These variables were set by you during setup.
MIN_RAM="${RAM_MB}M"
MAX_RAM="${RAM_MB}M"
JAR_FILE="$JAR_FILE"
SERVER_DIR="$SERVER_PATH"

# --- LAUNCH LOOP ---
echo "Starting server launch loop..."
echo "Server Path: \$SERVER_DIR"
echo "RAM Settings: Min: \$MIN_RAM, Max: \$MAX_RAM"

# 'cd' is crucial.
# The script must run from the server's directory
# to find 'eula.txt', 'server.properties', etc.
cd "\$SERVER_DIR" || { echo -e "Error: Server directory not found: \$SERVER_DIR"; exit 1; }

# Start the server in a loop
while true
do
    echo "Starting server ('\$JAR_FILE')..."
    
    java -Xms\$MIN_RAM -Xmx\$MAX_RAM -jar \$JAR_FILE nogui

    # This part runs if the java command stops (server crashes or stops)
    echo "Server stopped. Restarting in 5 seconds."
    echo "Press Ctrl+C to stop the script completely."
    sleep 5
done
EOF

chmod +x "$OUTPUT_FILE"

echo ""
echo -e "${GREEN}====================================================${RESET}"
echo -e "${GREEN}==             INSTALLATION COMPLETE!             ==${RESET}"
echo -e "${GREEN}====================================================${RESET}"
echo ""
echo -e "${CYAN}Your start script has been successfully created:${RESET}"
echo -e "  ${YELLOW}$OUTPUT_FILE${RESET}"
echo ""
echo -e "${CYAN}To start the server, you can use this command:${RESET}"
echo -e "  ${GREEN}cd $SERVER_PATH && ./start.sh${RESET}"
echo ""
echo -e "${CYAN}It is recommended to use 'screen' to keep the server running in the background:${RESET}"
echo -e "  ${GREEN}screen -S mc $SERVER_PATH/start.sh${RESET}"
echo ""